// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingCart_T8.Data;

#nullable disable

namespace ShoppingCart_T8.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ShoppingCart_T8.Models.CartItem", b =>
                {
                    b.Property<int>("ProductId_FK")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId_FK")
                        .HasColumnType("int");

                    b.Property<int>("CartItemQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId_FK", "CustomerId_FK");

                    b.HasIndex("CustomerId_FK");

                    b.ToTable("TBL_CartItem");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<Guid>("CustomerGuestCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("TBL_Customer");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.LogSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("CustomerId_FK")
                        .HasColumnType("int");

                    b.Property<DateTime>("LogSessionCookieExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LogSessionCookieStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId_FK");

                    b.ToTable("TBL_SessionLog");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.LogUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId_FK")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId_FK");

                    b.ToTable("TBL_UserLog");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int>("CustomerId_FK")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderPurchasedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId_FK");

                    b.ToTable("TBL_Order");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<int>("OrderId_FK")
                        .HasColumnType("int");

                    b.Property<string>("OrderItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderItemImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderItemPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("OrderItemProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemQuantity")
                        .HasColumnType("int");

                    b.Property<string>("OrderItemtStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId_FK");

                    b.ToTable("TBL_OrderItem");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.OrderItemCode", b =>
                {
                    b.Property<int>("OrderItemCodeCustomerId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderItem_ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderItemId_FK")
                        .HasColumnType("int");

                    b.HasKey("OrderItemCodeCustomerId", "OrderItem_ActivationCode");

                    b.HasIndex("OrderItemId_FK");

                    b.ToTable("TBL_OrderItemCode");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("ProductStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("TBL_Product");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.Review", b =>
                {
                    b.Property<int>("ProductId_FK")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId_FK")
                        .HasColumnType("int");

                    b.Property<int>("ReviewScore")
                        .HasColumnType("int");

                    b.HasKey("ProductId_FK", "CustomerId_FK");

                    b.HasIndex("CustomerId_FK");

                    b.ToTable("TBL_Review");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.CartItem", b =>
                {
                    b.HasOne("ShoppingCart_T8.Models.Customer", "CartItem_Customer")
                        .WithMany("Customer_CartItems")
                        .HasForeignKey("CustomerId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingCart_T8.Models.Product", "CartItem_Product")
                        .WithMany("Product_CartItems")
                        .HasForeignKey("ProductId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartItem_Customer");

                    b.Navigation("CartItem_Product");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.LogSession", b =>
                {
                    b.HasOne("ShoppingCart_T8.Models.Customer", "LogSession_Customer")
                        .WithMany("Customer_SessionLogs")
                        .HasForeignKey("CustomerId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogSession_Customer");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.LogUser", b =>
                {
                    b.HasOne("ShoppingCart_T8.Models.Customer", "LogUser_Customer")
                        .WithMany("Customer_UserLogs")
                        .HasForeignKey("CustomerId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogUser_Customer");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.Order", b =>
                {
                    b.HasOne("ShoppingCart_T8.Models.Customer", "Order_Customer")
                        .WithMany("Customer_Orders")
                        .HasForeignKey("CustomerId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order_Customer");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.OrderItem", b =>
                {
                    b.HasOne("ShoppingCart_T8.Models.Order", "OrderItem_Order")
                        .WithMany("Order_OrderItems")
                        .HasForeignKey("OrderId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem_Order");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.OrderItemCode", b =>
                {
                    b.HasOne("ShoppingCart_T8.Models.OrderItem", "OrderItemCode_OrderItem")
                        .WithMany("OrderItemCodes")
                        .HasForeignKey("OrderItemId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItemCode_OrderItem");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.Review", b =>
                {
                    b.HasOne("ShoppingCart_T8.Models.Customer", "Review_Customer")
                        .WithMany("Customer_Reviews")
                        .HasForeignKey("CustomerId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingCart_T8.Models.Product", "Review_Product")
                        .WithMany("Product_Reviews")
                        .HasForeignKey("ProductId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review_Customer");

                    b.Navigation("Review_Product");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.Customer", b =>
                {
                    b.Navigation("Customer_CartItems");

                    b.Navigation("Customer_Orders");

                    b.Navigation("Customer_Reviews");

                    b.Navigation("Customer_SessionLogs");

                    b.Navigation("Customer_UserLogs");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.Order", b =>
                {
                    b.Navigation("Order_OrderItems");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.OrderItem", b =>
                {
                    b.Navigation("OrderItemCodes");
                });

            modelBuilder.Entity("ShoppingCart_T8.Models.Product", b =>
                {
                    b.Navigation("Product_CartItems");

                    b.Navigation("Product_Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
